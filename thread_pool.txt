#pragma once
#ifndef THREAD_POOL_H
#define THREAD_POOL_H
#include<vector>
#include<queue>
#include<thread>
#include<atomic>  
/*c++11 引入了原子操作的概念并通过这个新的头文件提供了多种原子操作数据类型，例如，
atomic_bool,atomic_int等等，如果我们在多个线程中对这些类型的共享资源进行操作，编译
器将保证这些操作都是原子性的，也就是说，确保任意时刻只有一个线程对这个资源进行访问，
编译器将保证，多个线程访问这个共享资源的正确性。*/
#include<condition_variable>
/*C++11的标准库中新增加的条件变量的实现，与pthread的实现语义完全一致。使用条件变量
做并发控制时，某一时刻阻塞在一个条件变量上的各个线程应该在调用wait操作时指明同一个
互斥锁，此时该条件变量与该互斥锁绑定；否则程序的行为未定义。条件变量必须与互斥锁配
合使用，其理由是程序需要判定某个条件(condition或称predict)是否成立，该条件可以是任
意复杂。*/
/*
值得注意的是，unique_lock 对象同样也不负责管理 Mutex 对象的生命周期，unique_lock 对
象只是简化了 Mutex 对象的上锁和解锁操作，方便线程对互斥量上锁，即在某个 unique_lock
 对象的声明周期内，它所管理的锁对象会一直保持上锁状态；而 unique_lock 的生命周期结束
 之后，它所管理的锁对象会被解锁，这一点和 lock_guard 类似，但 unique_lock 给程序员提
 供了更多的自由，我会在下面的内容中给大家介绍 unique_lock 的用法。*/
#include<future>
#include<functional>
/*std::function是一个函数包装器模板，最早来自boost库，对应其boost::function函数包装
器。在c++0x11中，将boost::function纳入标准库中。该函数包装器模板能包装任何类型的可调
用元素（callable element），例如普通函数和函数对象。包装器对象可以进行拷贝，并且包装
器类型仅仅只依赖于其调用特征（call signature），而不依赖于可调用元素自身的类型。一个
std::function类型对象实例可以包装下列这几种可调用元素类型：函数、函数指针、类成员函数
指针或任意类型的函数对象（例如定义了operator()操作并拥有函数闭包）。std::function对象
可被拷贝和转移，并且可以使用指定的调用特征来直接调用目标元素。当std::function对象未包
裹任何实际的可调用元素，调用该std::function对象将抛出std::bad_function_call异常。*/
#include<stdexcept>
namespace std
{
#define MAX_THREAD_NUM 50
class threadpool
{
		using Task = function<void()>;
		//线程池
		vector<thread> pool;
		//任务队列
		queue<Task> tasks;
		//同步
		mutex m_lock;
		//条件阻塞
		condition_variable cv_task;
		//是否关闭提交
		atomic<bool> stoped;
		//空闲线程数量
		atomic<int> idlThrNum;
	public:
		inline threadpool(unsigned short size = 4)
		{
			idlThrNum = size < 1 ? 1 : size;
			for (; pool.size() < MAX_THREAD_NUM && size>0; size--)
			{
			//将执行函数的线程压入线程池，即vector<thread>
				pool.emplace_back(
				[this]
				{
					while (stoped)
					{
						Task task;//建立一个function<void()>，因为之前是lambda压入的。
						{
							unique_lock<mutex> lock{ this->m_lock };
							//利用条件变量来进行值得修改
							this->cv_task.wait(lock,
							[this]
							{
								return !stoped || !this->tasks.empty();
							});
							if (!stoped && this->tasks.empty())
								return;
							//右值引用里面的移动语义
							task = move(this->tasks.front());
							this->tasks.pop();
						}
						idlThrNum--;
						task();
						idlThrNum++;
					}
				}
				);
			}
		}
		inline ~threadpool()
		{
			stoped = false;
			cv_task.notify_all();
			for (thread& thread : pool)
			{
				if (thread.joinable())
					thread.join();
			}
			//析构函数，对各个线程进行回收，防止出现僵尸线程。
		}

	public:
		//提交一个任务
		//调用.get()获取返回值会等待任务执行完，获取返回值
		//有两种方法可以实现调用类成员
		//一种是使用 bind: .commit(bind(&Dog::func,&dog))
		//另外一种是 mem_fn : .commit(mem_fn(&Dog::func, &dog))
		//利用泛型编程，自动推导类型。
		template<class F, class ...Args>
		auto commit(F && f, Args&&...args)->future<decltype(f(args...))>
		{
			if (stoped.load())
				throw runtime_error("commit on ThreadPool is stopped");
			using RetType = decltype(f(args...));
			auto task = make_shared<packaged_task<RetType()>>
				(bind(forward<F>(f), forward<Args>(args)...));//建立一个智能指针。
			future<RetType> fut = task->get_future();//为了获得相应函数的执行结果
			{
			//对公共资源进行加锁，同时利用{}进行作用域的限制，lock一旦退出作用域，自动析构会unlock(m_lock)
				lock_guard<mutex> lock(m_lock);
				tasks.emplace([task]() {(*task)(); });
			}
			cv_task.notify_one();//唤醒一个阻塞线程。
			return fut;
		}
		int idlCount() { return idlThrNum; }
};
};
#endif


